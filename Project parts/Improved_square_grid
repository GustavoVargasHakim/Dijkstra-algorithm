#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Sep 12 22:06:55 2019

@author: gustavo + clemente"""

'''This program allows to select squares in the grid by clicking on them'''

import pygame
import numpy as np

'''Setup variables'''
size = (800,710) #Window size

'''Arrays to contain the squares'''
squares = []

#RGB for colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

'''Initialize pygame'''
pygame.init()

'''Activate the window display'''
screen = pygame.display.set_mode(size)
pygame.display.set_caption("Dijkstra's algorithm")

done = False #Control boolean variables

'''Activate clock'''
#Manages the speed of updates in the window
clock = pygame.time.Clock()

'''Grid setup'''
width=8
height=8
margin=1

screen.fill(WHITE) #Window background color

for column in range(0, 800, width):
        for row in range(0, 710, height):
            pygame.draw.rect(screen, BLACK, [column,row,width,height], 1)
            squares.append(pygame.Rect(column,row,width,height))

initial_check = True    
'''Game loop'''
#Al the Dijkstra graphical simulation goes inside this while loop
while not done:
    
    #This section allows the window to be closed
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True
    
    if event.type == pygame.MOUSEBUTTONDOWN:
        initial_square = [s for s in squares if s.collidepoint(event.pos)]
        pygame.draw.rect(screen, RED, initial_square[0])
    
            
    pygame.display.flip() #Actualize a change in the window (important)
    
    clock.tick(60) #60 fps only

#Close the window
pygame.quit()