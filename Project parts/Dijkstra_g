#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Sep 13 13:43:28 2019

@author: gustavo
"""

import pygame
import numpy as np
import random

'''Function to choose if one square is a corner, a wall or another'''
def get_tipo_cuadrado (x, y) :
    if x == 1 and y == 1:
        tipo = 'ESI' # Esquina Superior Izquierda

    elif x == 100 and y == 1:
        tipo = 'ESD' # Esquina Superior Derecha

    elif x == 100 and y == 89:
        tipo = 'EID' # Esquina Inferior Derecha

    elif x == 1 and y == 89:
        tipo = 'EII' # Esquina Inferior Izquierda

    elif x == 1 and y > 1 and y < 89:
        tipo = 'MZ' # Pared Izquierda xd

    elif x == 100 and y > 1 and y < 89:
        tipo = 'MD' # Pared Derecha

    elif x > 1 and x < 100 and y == 1:
        tipo = 'MS' # Pared Superior
    
    elif x > 1 and x < 100 and y == 89:
        tipo = 'MI' # Pared Inferior

    else:
        tipo = 'OT' # Nodo Libre

    return tipo

def is_obstacle(b_and_w_matrix, x, y):
    p = b_and_w_matrix[int(x) - 2, int(y) - 2]
    if p == 1:
        return True
    else:
        return False

def is_xory_zero(x, y):
    if x == 0 or y == 0:
        return True
    else:    
        return False

RAIZ_2 = 1.4142 # Valor constante de raÃ­z cuadrada de 2
def set_edges_and_weights(x, y, sqrt_type, graph_list, point, b_and_w_matrix):
    # Esquina Superior Izquierda (ESI)
    if sqrt_type == 'ESI':
        # Agrega cuadrito a graph_list
        graph_list[point][0].append((x, y))

        # Derecha
        if b_and_w_matrix[x+1-1, y-1] != 1:
            graph_list[point][1].append([x+1, y, 1])

        # Abajo
        if b_and_w_matrix[x-1, y+1-1] != 1:
            graph_list[point][1].append([x, y+1, 1])

        # Diagonal abajo derecha
        if b_and_w_matrix[x+1-1, y+1-1] != 1:
            graph_list[point][1].append([x+1, y+1, RAIZ_2])


    # Esquina Superior Derecha (ESD)
    elif sqrt_type == 'ESD':
        graph_list[point][0].append((x, y))

        # Izquierda
        if b_and_w_matrix[x-1-1, y-1] != 1:
            graph_list[point][1].append([x-1, y, 1])

        # Abajo
        if b_and_w_matrix[x-1, y+1-1] != 1:
            graph_list[point][1].append([x, y+1, 1])

        # Diagonal abajo izquierda
        if b_and_w_matrix[x-1-1, y+1-1] != 1:
            graph_list[point][1].append([x-1, y+1, RAIZ_2])

    # Esquina Inferior Izquierda (EII)
    elif sqrt_type == 'EII':
        graph_list[point][0].append((x, y))

        # Arriba
        if b_and_w_matrix[x-1, y-1-1] != 1:
            graph_list[point][1].append([x, y-1, 1])

        # Derecha
        if b_and_w_matrix[x+1-1, y-1] != 1:
            graph_list[point][1].append([x+1, y, 1])

        # Diagonal arriba derecha
        if b_and_w_matrix[x+1-1, y-1-1] != 1:
            graph_list[point][1].append([x+1, y-1, RAIZ_2])

    # Esquina Inferior Derecha (EID)
    elif sqrt_type == 'EID':
        graph_list[point][0].append((x, y))

        # Arriba
        if b_and_w_matrix[x-1, y-1-1] != 1:
            graph_list[point][1].append([x, y-1, 1])

        # Izquierda
        if b_and_w_matrix[x-1-1, y-1] != 1:
            graph_list[point][1].append([x-1, y, 1])

        # Diagonal arriba izquierda
        if b_and_w_matrix[x-1-1, y-1-1] != 1:
            graph_list[point][1].append([x-1, y-1, RAIZ_2])

    # Muro Superior (MS)
    elif sqrt_type == 'MS':
        graph_list[point][0].append((x, y))

        # Abajo
        if b_and_w_matrix[x-1, y+1-1] != 1:
            graph_list[point][1].append([x, y+1, 1])

        # Derecha
        if b_and_w_matrix[x+1-1, y-1] != 1:
            graph_list[point][1].append([x+1, y, 1])

        # Izquierda
        if b_and_w_matrix[x-1-1, y-1] != 1:
            graph_list[point][1].append([x-1, y, 1])

        # Diagonal abajo derecha
        if b_and_w_matrix[x+1-1, y+1-1] != 1:
            graph_list[point][1].append([x+1, y+1, RAIZ_2])

        # Diagonal abajo izquierda
        if b_and_w_matrix[x-1-1, y+1-1] != 1:
            graph_list[point][1].append([x-1, y+1, RAIZ_2])

    # Muro Inferior (MI)
    elif sqrt_type == 'MI':
        graph_list[point][0].append((x, y))

        # Arriba
        if b_and_w_matrix[x-1, y-1-1] != 1:
            graph_list[point][1].append([x, y-1, 1])

        # Derecha
        if b_and_w_matrix[x+1-1, y-1] != 1:
            graph_list[point][1].append([x+1, y, 1])

        # Izquierda
        if b_and_w_matrix[x-1-1, y-1] != 1:
            graph_list[point][1].append([x-1, y, 1])

        # Diagonal arriba derecha
        if b_and_w_matrix[x+1-1, y-1-1] != 1:
            graph_list[point][1].append([x+1, y-1, RAIZ_2])

        # Diagonal arriba izquierda
        if b_and_w_matrix[x-1-1, y-1-1] != 1:
            graph_list[point][1].append([x-1, y-1, RAIZ_2])

    # Muro Derecho (MD)
    elif sqrt_type == 'MD':
        graph_list[point][0].append((x, y))

        # Arriba
        if b_and_w_matrix[x-1, y-1-1] != 1:
            graph_list[point][1].append([x, y-1, 1])

        # Izquierda
        if b_and_w_matrix[x-1-1, y-1] != 1:
            graph_list[point][1].append([x-1, y, 1])

        # Abajo
        if b_and_w_matrix[x-1, y+1-1] != 1:
            graph_list[point][1].append([x, y+1, 1])

        # Diagonal arriba izquierda
        if b_and_w_matrix[x-1-1, y-1-1] != 1:
            graph_list[point][1].append([x-1, y-1, RAIZ_2])

        # Diagonal abajo izquierda
        if b_and_w_matrix[x-1-1, y+1-1] != 1:
            graph_list[point][1].append([x-1, y+1, RAIZ_2])

    # Muro Derecho (MZ)
    elif sqrt_type == 'MZ':
        graph_list[point][0].append((x, y))

        # Arriba
        if b_and_w_matrix[x-1, y-1-1] != 1:
            graph_list[point][1].append([x, y-1, 1])

        # Derecha
        if b_and_w_matrix[x+1-1, y-1] != 1:
            graph_list[point][1].append([x+1, y, 1])

        # Abajo
        if b_and_w_matrix[x-1, y+1-1] != 1:
            graph_list[point][1].append([x, y+1, 1])

        # Diagonal arriba derecha
        if b_and_w_matrix[x+1-1, y-1-1] != 1:
            graph_list[point][1].append([x+1, y-1, RAIZ_2])

        # Diagonal abajo derecha
        if b_and_w_matrix[x+1-1, y+1-1] != 1:
            graph_list[point][1].append([x+1, y+1, RAIZ_2])

    # Nodo libre (OT)
    else:
        graph_list[point][0].append((x, y))
        # Arriba
        if b_and_w_matrix[x-1, y-1-1] != 1:
            graph_list[point][1].append([x, y-1, 1])

        # Derecha
        if b_and_w_matrix[x+1-1, y-1] != 1:
            graph_list[point][1].append([x+1, y, 1])

        # Izquierda
        if b_and_w_matrix[x-1-1, y-1] != 1:
            graph_list[point][1].append([x-1, y, 1])

        # Abajo
        if b_and_w_matrix[x-1, y+1-1] != 1:
            graph_list[point][1].append([x, y+1, 1])

        # Diagonal arriba derecha
        if b_and_w_matrix[x+1-1, y-1-1] != 1:
            graph_list[point][1].append([x+1, y-1, RAIZ_2])

        # Diagonal arriba izquierda
        if b_and_w_matrix[x-1-1, y-1-1] != 1:
            graph_list[point][1].append([x-1, y-1, RAIZ_2])

        # Diagonal abajo derecha
        if b_and_w_matrix[x+1-1, y+1-1] != 1:
            graph_list[point][1].append([x+1, y+1, RAIZ_2])

        # Diagonal abajo izquierda
        if b_and_w_matrix[x-1-1, y+1-1] != 1:
            graph_list[point][1].append([x-1, y+1, RAIZ_2])

'''Ejemplos de prueba'''    
rect1 = pygame.Rect(1, 1, 4, 4) #ESI
rect2 = pygame.Rect(100, 1, 4, 4) #ESD
rect3 = pygame.Rect(100, 89, 4, 4) #EID
rect4 = pygame.Rect(1, 89, 4, 4) #EII
rect5 = pygame.Rect(1, 60, 4, 4) #MI
rect6 = pygame.Rect(100, 60, 4, 4) #MD
rect7 = pygame.Rect(40, 89, 4, 4) #MI
rect8 = pygame.Rect(50, 1, 4, 4) #MS
rect9 = pygame.Rect(50, 45, 4, 4)  #Otro

#Los rectangulos son una 4-tupla; rect1[0] y rect1[1] son las coordenadas 'x' y 'y' de rect1

'''Setup variables'''
size = (800,710) #Window size

'''Arrays to contain the squares'''
squares = []

#RGB for colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (46, 145, 22)
RED = (255, 0, 0)
BLUE = (0, 0, 255)

'''Initialize pygame'''
pygame.init()

'''Activate the window display'''
screen = pygame.display.set_mode(size)
pygame.display.set_caption("Dijkstra's algorithm")

done = False #Control boolean variables

'''Activate clock'''
#Manages the speed of updates in the window
clock = pygame.time.Clock()

'''Grid setup'''
width=8
height=8
margin=1

x = width
y = height

screen.fill(WHITE) #Window background color

for column in range(0, 800, width):
        for row in range(0, 710, height):
            pygame.draw.rect(screen, BLACK, [column,row,width,height], 1)
            squares.append(pygame.Rect(column,row,width,height))

'''Generador aleatorio de obstaculos'''
obs = int(input("Selecciona el numero de obstaculos: "))
obstacles = []
for i in range(obs) :
    '''Crear un arreglo vacio por cada obstaculo, dentro del arreglo obstacles'''
    obstacles.append([])

# 0s and 1s squares colours matrix, BLACK = 1, WHITE = 0, check line 202
b_and_w_matrix = np.zeros((100, 89))

counter = 0
for i in range(obs) :
    
    '''Todos los casos a partir de i >= 1, revisar primero el caso counter == 0'''
    if counter != 0 :
        
        obs_width = random.randint(1, 20) #Generar anchura aleatoria
        obs_height = random.randint(1, 20) #Generar altura aleatoria
        
        x_c = [] #Nuevo arreglo de coordenadas x 
        x_c.append(obstacles[i - 1][0]) #Guardar la coordenada xi del obstaculo pasado
        x_c.append(obstacles[i - 1][2]) #Guardar la coordenada xf del obstaculo pasado
        
        choice = random.choice(x_c) #Elegir alguna de las coordenadas xi o xf al azar, de x_c
        '''El motivo de hacer esto es dejar espacios entre obstaculos, si choice elige xi, 
        el siguiente obstaculo estara mas arriba que el anterior, si choice elige xf, el 
        siguiente obstaculo esta mas abajo que el anterior, se deja al azar'''
        if choice == obstacles[i-1][0] :#Caso xi
            limit1 = obstacles[i - 1][0] - 1
            limit2 = obstacles[i - 1][1] - 1
            '''El siguiente proceso se encarga de verificar que los numeros aleatorios no sean 
            iguales en un mismo rango, por ejemplo, random.randint(2,2) <--- es un error
            entre mas obstaculos, este error aumenta mas'''
            if limit1 <= 2 :
                limit1 = limit1 + random.randint(2, random.randint(1,20))
            if limit2 <= 2 :
                limit2 = limit2 + random.randint(2, random.randint(1,20))
            
            '''Se generan las nuevas coordenadas iniciales del nuevo obstaculo'''
            xi = random.randint(2, limit1)
            yi = random.randint(2, limit2)

        else: #Caso xf
            limit3 = obstacles[i - 1][2] + 1
            limit4 = obstacles[i - 1][3] + 1
            '''El siguiente proceso se encarga de verificar que los numeros aleatorios no sean 
            iguales en un mismo rango, por ejemplo, random.randint(2,2) <--- es un error
            entre mas obstaculos, este error aumenta mas'''
            if limit3 >= 99 :
                limit3 = limit3 - random.randint(2, random.randint(1,20))
            if limit4 >= 88 :
                limit4 = limit4 - random.randint(2, random.randint(1,20))
            
            '''Se generan las nuevas coordenadas iniciales del nuevo obstaculo'''
            xi = random.randint(limit3, 99)
            yi = random.randint(limit4, 88)
            
        '''Generar coordenadas finales del nuevo obstaculo'''
        xf = xi + obs_width
        if xf > 100 :
            xf = 99
        
        yf = yi + obs_height
        if yf > 89 :
            yf = 88
        
        '''Guardar las coordenadas del nuevo obstaculo en la lista i de obstacles'''
        obstacles[i].append(xi)
        obstacles[i].append(yi)
        obstacles[i].append(xf)
        obstacles[i].append(yf)
    
    '''Caso 1: siempre se cumple al principio, cuando i = 0'''
    if counter == 0 :
        obs_width = random.randint(1, 20) #Generar anchura aleatoria
        obs_height = random.randint(1, 20) #Generar altura aleatoria
    
        xi = random.randint(2,99)#Generar coordenada x inicial (esquina inferior izquierda)
        yi = random.randint(2,88) #Generar coordenada y inicial (esquina inferior izquierda)
    
    
        xf = xi + obs_width #Genera coordenada x final (esquina superior derecha)
        if xf > 100 : #Si la coordenada se pasa del limite
            xf = 99
        
        yf = yi + obs_height #Genera coordenada x final (esquina superior derecha)
        if yf > 89 : #Si la coordenada se pasa del limite
            yf = 88
        
        counter = 1 #Cambio de caso, este if ya nunca ocurrira nuevamente
        
        '''Guardar las coordenadas de las esquinas inferior izquierda (xi,yi) y superior 
        derecha (xf, yf) dentro del primer arreglo contenido en obstacles'''
        obstacles[i].append(xi)
        obstacles[i].append(yi)
        obstacles[i].append(xf)
        obstacles[i].append(yf)
    
    '''Dibujar obstaculo'''
    for j in range(xi, xf, 1):
        for k in range(yi, yf, 1):
            b_and_w_matrix[j-1][k-1] = 1 # BLACK
            pygame.draw.rect(screen, BLACK, [x*(j - 1),y*(k - 1),width - 1,height - 1])

'''Get initial square'''
#xi = int(input("La coordenada x del punto inicial: "))
#yi = int(input("La coordenada y del punto inicial: "))

#pygame.draw.rect(screen, RED, [x*(xi - 1), y*(yi - 1), width - 1, height - 1] )

'''Get final square'''
#xf = int(input("La coordenada x del punto final: "))
#yf = int(input("La coordenada y del punto final: "))
#pygame.draw.rect(screen, GREEN, [x*(xf - 1), y*(yf - 1), width - 1, height - 1])

""" Create List to make the graph """
graph_list = [] # 0 = no contabilizado, usar if para identificarlo

# Creando una graph_list vacÃ­a
# Una graph_list es una 2-tupla ((), ())
    # graph_list[[], []]
# la primera tupla es una 2-tupla, que pertenece al punto actual (X, Y)
    # graph_list[[X, Y], []]
# la segunda tupla es una n-tupla, que son los siguientes puntos a los que puedo ir a partir de (X, Y),
    # graph_list[[X, Y], [[], [], ..., [N]]]
# cada tupla en n-tupla, a su vez, es una 3-tupla (X, Y, Weight)
    # graph_list[[X, Y], [[X1, Y1, W1], [X2, Y2, W2], ..., [XN, YN, WN]]]
for i in range(int(800/8) * int(710/8)):
    graph_list.append([[], []])

#print(graph_list[0])

### Llenando la graph_list ###
point_w = 0 # Variable para recuperar conteo de puntos blancos
point_b = 0 # Variable para recuperar conteo de puntos negros

# Para cada cuadrito (i, j)
for i in range(0, 100):
    for j in range(0, 89):
        # Si no es BLACK = 1
        if b_and_w_matrix[i][j] != 1:
            # Toma el tipo de cuadrito
            sqrt_type = get_tipo_cuadrado(i+1, j+1)
            # Inicializa las vÃ©rtices y pesos del cuadrito
            set_edges_and_weights(i+1, j+1, sqrt_type, graph_list, point_w, b_and_w_matrix)
            point_w += 1
        else:
            point_b += 1

print("\n VISTA DE LISTA *")
# Solo contar listas llenas
for i in range(point_w):
    print(i, ":", graph_list[i])

#print("PW:", point_w)
print("Real:", (800/8)*(710/8), "Relative:", point_w + point_b, "Dif:", ((800/8)*(710/8)) - (point_w + point_b))

pygame.display.flip()

'''Selecting the initial square'''
counter = 0
while not done:
    for event in pygame.event.get():
        if event.type == pygame.MOUSEBUTTONDOWN:
            init_square = [s for s in squares if s.collidepoint(event.pos)]
            print(init_square[0][0])
            print(init_square[0][1])
            if b_and_w_matrix[int((init_square[0][0])/8)][int((init_square[0][1])/8)] == 1 :
                pygame.draw.rect(screen, BLACK, initial_square[0])
                init_square = []
            else :
                initial_square = pygame.Rect((int(init_square[0][0])/8)+1, (int(init_square[0][1])/8)+1, height, width)
                pygame.draw.rect(screen, RED, init_square[0])
                counter = counter + 1
        
    pygame.display.flip()
    
    if counter >= 1 :
        break

'''Selecting the initial square'''
counter = 0
while not done:
    for event in pygame.event.get():
        if event.type == pygame.MOUSEBUTTONDOWN:
            finish_square = [s for s in squares if s.collidepoint(event.pos)]
            print(finish_square[0][0])
            print(finish_square[0][1])
            if b_and_w_matrix[int((finish_square[0][0])/8)][int((finish_square[0][1])/8)] == 1 :
                pygame.draw.rect(screen, BLACK, finish_square[0])
                finish_square = []
            else :
                end_square = pygame.Rect((int(finish_square[0][0])/8)+1, (int(finish_square[0][1])/8)+1, height, width)
                pygame.draw.rect(screen, GREEN, finish_square[0])
                counter = counter + 1
        
    pygame.display.flip()
    
    if counter >= 1 :
        break
        
'''Game loop'''
#Al the Dijkstra graphical simulation goes inside this while loop
while not done:
    
    #This section allows the window to be closed
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True
        
    pygame.display.flip() #Actualize a change in the window (important)
    
    clock.tick(60) #60 fps only

#Close the window
pygame.quit()